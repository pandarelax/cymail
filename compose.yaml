# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  # define the worker service
  worker:
    # we use depends_on to specify that service depends on another service
    # in this case, we specify that the web depends on the api service
    # this means that the api service will be started before the web service
    depends_on: 
      - redis
      - db
    # specify the build context for the web service
    # this is the directory where the Dockerfile for the web service is located
    build: ./worker
    # specify the ports to expose for the web service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 3001:3001
    # specify the environment variables for the web service
    # these environment variables will be available inside the container
    environment:
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgres://postgres:postgres@db:5432/cymail

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
        - path: ./worker/package.json
          action: rebuild
        - path: ./worker/package-lock.json
          action: rebuild
        # it'll watch for changes in the worker directory and sync the changes with the container real time
        - path: ./worker
          target: /app
          action: sync

  # define the api service/container
  core: 
    # api service depends on the db service so the db service will be started before the api service
    depends_on: 
      - db
      - redis

    # specify the build context for the api service
    build: ./core
    
    # specify the ports to expose for the api service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports: 
      - 3000:3000

    # specify environment variables for the api service
    environment: 
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgres://postgres:postgres@db:5432/cymail
      WORKER_URL: http://worker:3001
    
    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./core/package.json
          action: rebuild
        - path: ./core/package-lock.json
          action: rebuild
        
        # it'll watch for changes in the core directory and sync the changes with the container real time
        - path: ./core
          target: /app
          action: sync

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    image: postgres:latest

    # specify the ports to expose for the db service
    # usually, postgres runs on port 5432. So we're exposing the port 5432 on the host machine and mapping it to the port 5432 inside the container
    ports:
      - 5432:5432

    # specify the volumes to mount for the db service
    # we're mounting the volume named "cymail" inside the container at /data/db directory
    # this is done so that the data inside the postgres container is persisted even if the container is stopped
    volumes:
      - cymail:/data/db

  # define the redis service
  redis:
    # specify the image to use for the redis service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the redis service, we're using the image from docker hub so we specify the image as "image: redis:latest"
    # you can find the image name and tag for redis from docker hub here: https://hub.docker.com/_/redis
    image: redis:latest

    # specify the ports to expose for the redis service
    # generally, we do this in api service using redis atlas. But for demo purposes, we're using a local redis instance
    # usually, redis runs on port 6379. So we're exposing the port 6379 on the host machine and mapping it to the port 6379 inside the container
    ports:
      - 6379:6379

    # specify the volumes to mount for the redis service
    # we're mounting the volume named "cymail" inside the container at /data/db directory
    # this is done so that the data inside the redis container is persisted even if the container is stopped
    volumes:
      - cymail:/data/db

# define the volumes to be used by the services
volumes:
  cymail: